name: CI

on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.ref != '' }}

env:
  CARGO_TERM_COLOR: always
  # Disable incremental compilation.
  #
  # Incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. However,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. Thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # See https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # Allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). This should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short
  RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings

jobs:
  rustfmt:
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
      - run: rustup component add rustfmt
      - name: rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all --check

  clippy:
    needs: [rustfmt]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]
      fail-fast: false
    steps:
      - uses: arduino/setup-protoc@v1
        # this avoids rate-limiting
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v3
      - run: rustup component add clippy
      # TODO(bradh): debug and re-enable this; the caching is breaking the clippy build
      # Enable caching of the 'librocksdb-sys' crate by additionally caching the
      # 'librocksdb-sys' src directory which is managed by cargo
      - uses: bmwill/rust-cache@v1 # Fork of 'Swatinem/rust-cache' which allows caching additional paths
      #   with:
      #     path: ~/.cargo/registry/src/**/librocksdb-sys-*

      # See '.cargo/config' for list of enabled/disappled clippy lints
      - name: cargo clippy
        run: cargo clippy

  test:
    needs: [rustfmt]
    timeout-minutes: 45
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - uses: taiki-e/install-action@nextest
      - name: cargo test - Unit Tests
        run: |
          cargo nextest run --color=always --failure-output=final --no-fail-fast
      - name: cargo test - Ignored Tests
        run: |
          cargo nextest run --color=always --failure-output=final --no-fail-fast --run-ignored=ignored-only
      - name: doctests
        run: |
          cargo test --doc
      - name: rustdoc
        run: |
          cargo doc --workspace --no-deps